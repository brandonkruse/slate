

@GET("getFeed?" + Constants.APP_VERSION)
Call<List<DVAProductModel>> getFeed(@Query("category") int categoryNum, @Query("skip") int skip);

/products   [GET]

@GET("getProductDetails?" + Constants.APP_VERSION)
Call<List<DVAProductModel>> getProductDetails(@Query("prod_id") String prod_id);

/products/{id} [GET]

@GET("getWaitlist?" + Constants.APP_VERSION)
Call<List<List<DVACartModel>>> getWaitlist();

/products/waitlist [GET]



@GET("isVIP?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> isVIP();

/products/vip/access [GET]

@GET("search?" + Constants.APP_VERSION)
Call<List<DVAProductModel>> search(@Query("app") String app,
                                   @Query("size") String size,
                                   @Query("category") String category,
                                   @Query("instock") boolean instock,
                                   @Query("skip") int skip);



/products/search?size=category=instock=skip=




@GET("getCart?" + Constants.APP_VERSION)
Call<List<List<DVACartModel>>> getCart();

/cart [GET]


@GET("getPastOrders?" + Constants.APP_VERSION)
Call<List<List<DVACartModel>>> getPastOrders();

/carts [GET]


@GET("addItem?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> addItem(@Query("prod_id") String prod_id,
                                                   @Query("inventory_id") String inventory_id,
                                                   @Query("install_source") String install_source);

/cart/products [POST]
{
{id}
{inventory_id}
}


@GET("deleteVariant?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> deleteVariant(@Query("oid") String oid,
                                                         @Query("opid") String opid,
                                                         @Query("call") String call,
                                                         @Query("Source") String source);

/cart/products/{inventory_id} [DELETE]

@GET("addCoupon?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> addCoupon(@Query("oid") int oid,
                                                     @Query("code") String code);

/cart/coupon [POST]
{
code
}


@GET("stripeListCards?" + Constants.APP_VERSION)
Call<List<DVAStripeCardModel>> stripeListCards(@Query("app") Boolean app);

/stripe/cards [GET]


@GET("stripeAddCard?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> stripeAddCard(@Query("source") String source);

/stripe/cards [POST]
{
  {source}
}

@GET("stripeDeleteCard?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> stripeDeleteCard(@Query("app") String app, @Query("card") String cardID);


/stripe/cards/{cardID} [DELETE]


@GET("stripeDefaultSource?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> stripeDefaultSource(@Query("default_source") String source);

/stripe/cards/{cardID} [PUT]



@GET("stripeCheckout?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> stripeCheckout(@Query("oid") String oid, @Query("amount") int amount,
                                                          @Query("token") String token, @Query("app") boolean app);



@GET("iosCheckout?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> iosCheckout(@Query("oid") String oid,
                                                       @Query("paymentjson") String paymentjson);


/checkout/stripe/ [POST]
{
oid,
amount,
token
}

/checkout/paypal/ [POST]
{
oid,
paymentjson
}




@GET("getAddress?" + Constants.APP_VERSION)
Call<DVAAddressModel> getAddress();

/address [GET]

@GET("setAddress?" + Constants.APP_VERSION)
Call<ResponseBody> setAddress(@Query("street") String street,
                                            @Query("apt") String apt,
                                            @Query("state") String state,
                                            @Query("city") String city,
                                            @Query("zip") String zip);

/address [POST]
{
street,
apt,
state,
city,
zip
}



@GET("getEmail?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> getEmail();

/email [GET]

@GET("changeEmail?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> changeEmail(@Query("email") String email);

/email [PUT]
{
email
}


@GET("getCredit?" + Constants.APP_VERSION)
Call<DVANetworkService.DVADefaultResponse> getCredit();

/balance [GET]


@POST("activateBalance?" + Constants.APP_VERSION +"&phone=yes")
Call<ResponseBody> activateBalance(@Query("oid") int oid);

/balance [POST]
{
oid
}





@GET("setToken?" + Constants.APP_VERSION)
Call<DVANetworkService.DVATokenResponse> setToken(@Query("accessToken") String accessToken,
                                                  @Query("userID") String userID);



@GET("setDeviceToken?" + Constants.APP_VERSION)
Call<ResponseBody> setDeviceToken(@Query("devicetoken") String deviceToken);
/deviceToken [POST]
{
token
}
